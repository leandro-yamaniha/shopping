version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shopping-postgres
    environment:
      POSTGRES_DB: shopping_db
      POSTGRES_USER: shopping_user
      POSTGRES_PASSWORD: shopping_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql  # Disabled - let Flyway handle DB setup
    networks:
      - shopping-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U shopping_user -d shopping_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Spring Boot 4 + Java 21 (Optimized)
  backend:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile.simple
    container_name: shopping-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/shopping_db
      SPRING_DATASOURCE_USERNAME: shopping_user
      SPRING_DATASOURCE_PASSWORD: shopping_pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: true
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - shopping-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Web React
  frontend-web:
    build:
      context: ./frontend-web
      dockerfile: Dockerfile
    container_name: shopping-frontend-web
    environment:
      REACT_APP_API_URL: http://localhost:8080/api
      REACT_APP_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - shopping-network
    volumes:
      - ./frontend-web/src:/app/src
      - ./frontend-web/public:/app/public
    restart: unless-stopped

  # Nginx Reverse Proxy (opcional para produção) - Disabled for now
  # nginx:
  #   image: nginx:alpine
  #   container_name: shopping-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - backend
  #     - frontend-web
  #   networks:
  #     - shopping-network
  #   restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  shopping-network:
    driver: bridge
